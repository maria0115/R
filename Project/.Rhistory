a<-1
a
a=1
a
a
a<-1
a
a
a=2
a
a<-2
a
a=1
a
a="abc"
a
class(a)
class(b)
b=3
class(b)
as.character(b)
class(b)
as.character(b)
class(b)
class(b)
as.character(b)
b2 = as.character(b)
class(b2)
b2
c(20,30,50)
a = c(20,30,50)
a
a[1]
b = c(1,2,3)
a+b
a = c("aa","bb","cc")
a+1
a(c(1,2))
a[c(1,2)]
a[1:3]
b = 1:10
v
b
b[-c(1,3)]
b[-3]
b[c(T,T,F)]
a = ("aa","bb")
a = c("aa","bb")
a
a[c(T,T,F)]
a[a=="aa"]
a = 1:100
a
a[a%2==1]
a[(a%2)==1]
a[(a%%2)==1]
matrix(1:15,ncol=3)
matrix(1:15,ncol=3,byrow=T)
?matrix
mdat <- matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3, byrow = TRUE,
dimnames = list(c("row1", "row2"),
c("C.1", "C.2", "C.3")))
mdat
dimnames = list(c("row1", "row2"),
c("C.1", "C.2", "C.3")))
dimnames = list(c("row1", "row2"),
c("C.1", "C.2", "C.3"))
dimnames
mdat
m = matrix(1:15,ncol=3,byrow=T)
,
m
m[2,2]
m[2]
m[2,]
m[,2]
m[-1,]
m[1,3]
m[c(1,3),]
m[2:4,c(2,4)]
m[2:4,c(1,3)]
m2 = data.frame(m)
m2
m[,1] = as.character(m[,1])
m
m = matrix(1:15,ncol=3,byrow=T)
m2 = data.frame(m)
m[,1] = as.character(m[,1])
m
m = matrix(1:15,ncol=3,byrow=T)
m
m2 = data.frame(m)
m2
as.character(m[,1])
m[,1] = as.character(m[,1])
m
m2[,1] = as.character(m2[,1])
str(m2)
m2
as.matrix(m2)
sex = c("남","여","여","남")
sex
sex2 = ifelse(sex=="남",1,2)
sex2
m2[,1]
m2$X1
m2$X2
m2$X2 = c(1,2,3,4,5)
m2
m2$X2 = c(1,2,3,4)
m2$X2 = c(1,2,3,4,7)
m2
cbind(m2,c(3,2,4,4,4))
m2
rbind(m2,c(1,2,3))
cbind(m2)
cbind(m2,m2)
rbind(m2,m2)
print(i)
for(i i 1:10){
print(i)
}
for(i in 1:10){
print(i)
}
for(i in m2){
print(i)
}
print(i)
for(i in m2){
print(i)
}
dim(m2)
rbind(m2,m2)
dim(m2)
m2 = rbind(m2,m2)
for(i in m2){
m2 = rbind(m2,m2)
}
dim(m2)
m3 = NULL
print(dim(m3))
for(i in m2){
m3 = rbind(m3,m2)
print(i)
print(dim(m3))
}
m2
dim(m2)
for(i in m2){
m3 = rbind(m3,m2)
print(i)
print(dim(m3))
}
m3 = NULL
m = matrix(1:15,ncol=3,byrow=T)
m2 = data.frame(m)
m3 = NULL
for(i in m2){
m3 = rbind(m3,m2)
print(i)
print(dim(m3))
}
dim(m2)
m3 = NULL
for(i in 1:10){
if(i%%2==0){
next;
}
m3 = rbind(m3,m2)
cat(i)
}
m3 = NULL
for(i in 1:10){
if(i%%2==0){
next;
}
m3 = rbind(m3,m2)
cat("\n",i)
}
if(i%%2==1){
next;
}
for(i in 1:10){
if(i%%2==1){
next;
}
m3 = rbind(m3,m2)
cat("\n",i)
}
for(i in 1:10){
if(i%%2==1){
next;
}
m3 = rbind(m3,m2);
cat("\n",i);
}
m3 = NULL
for(i in 1:10){
if(i%%2==1){
next;
}
m3 = rbind(m3,m2);
cat("\n",i);
}
m3
m3 = NULL
for(i in 1:10){
if(i%%2==1){
next;
}
m3 = rbind(m3,m2);
cat("\n",i);
cat(m3)
}
m3 = NULL
for(i in 1:10){
if(i%%2==1){
next;
}
m3 = rbind(m3,m2);
cat("\n",i);
print(m3)
}
m3 = NULL
for(i in 1:3){
if(i%%2==1){
next;
}
m3 = rbind(m3,m2);
cat("\n",i);
print(m3)
}
getwd()
setwd("D:/R/Project")
getwd()
.libPaths()
.libPaths("D:\R\lib")
.libPaths("D:/R/lib")
.libPaths()
library(MASS)
str(cats)
plot(cats$Hwt ~ cats$Bwt,
col="green", pch=5,
xlab="Body Weight (kg)", ylab="Heart Weight (g)",
main="Body Weight and Heart Weight of Cats")
cor(cats$Bwt, cats$Hwt)
install.packages("car")
library(car)
str(Prestige)
Prestige.lm <- lm(income ~ education, data=Prestige)
Prestige.lm
plot(Prestige$income ~ Prestige$education,
col="cornflowerblue", pch=19,
xlab="Education (years)", ylab="Income (dollars)",
main="Education and Income")
abline(Prestige.lm, col="salmon")
summary(Prestige.lm)
data(mtcars)
str(mtcars)
mtcars <- mtcars[c("mpg", "hp", "wt", "disp", "drat")]
summary(mtcars)
cor(mtcars)
mtcars.lm <- lm(mpg ~ hp + wt + disp + drat, data=mtcars)
summary(mtcars.lm)
cor.test(~ Bwt + Hwt, data=cats)
bank.df <- read.csv("./datasets/UniversalBank.csv")
bank.df <- bank.df[ , -c(1, 5, 8)]  # Drop ID and zip code, Education columns.
set.seed(123)
train_index <- sample(5000, 4000)
train.df <- bank.df[train_index, ]
valid.df <- bank.df[-train_index, ]
# run logistic regression
# use glm() (general linear model) with family = "binomial" to fit a logistic
# regression.
logit.reg <- glm(Personal.Loan ~ ., data = train.df, family = "binomial")
summary(logit.reg)
# use predict() with type = "response" to compute predicted probabilities.
logit.reg.pred <- predict(logit.reg, valid.df[, -7], type = "response")
# first 5 actual and predicted records
data.frame(actual = valid.df$Personal.Loan[1:30], predicted = logit.reg.pred[1:30])
library(caret)
# create confusion matrix and statistics
install.packages("caret")
library(caret)
library(caret)
confusionMatrix(as.factor(ifelse(logit.reg.pred > 0.5,1,0)), as.factor(valid.df$Personal.Loan))
library(caret)
confusionMatrix(as.factor(ifelse(logit.reg.pred > 0.5,1,0)), as.factor(valid.df$Personal.Loan))
confusionMatrix(as.factor(ifelse(logit.reg.pred > 0.5,1,0)), as.factor(valid.df$Personal.Loan))
## Naive Bayes and Word Cloud
# read the sms data into the sms data frame
sms_raw <- read.csv("sms_spam.csv", stringsAsFactors = FALSE)
# examine the structure of the sms data
str(sms_raw)
.libPaths()
